// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
public struct HostConnect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HostConnect GetRootAsHostConnect(ByteBuffer _bb) { return GetRootAsHostConnect(_bb, new HostConnect()); }
  public static HostConnect GetRootAsHostConnect(ByteBuffer _bb, HostConnect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HostConnect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Peerip { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPeeripBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPeeripBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPeeripArray() { return __p.__vector_as_array<byte>(4); }
  public int Peerport { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Servertype { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Serverid { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(12); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.Host_Connect; } }

  public static Offset<HostConnect> CreateHostConnect(FlatBufferBuilder builder,
      StringOffset peeripOffset = default(StringOffset),
      int peerport = 0,
      int servertype = 0,
      int serverid = 0,
      EPacketProtocol messageid = EPacketProtocol.Host_Connect) {
    builder.StartTable(5);
    HostConnect.AddMessageid(builder, messageid);
    HostConnect.AddServerid(builder, serverid);
    HostConnect.AddServertype(builder, servertype);
    HostConnect.AddPeerport(builder, peerport);
    HostConnect.AddPeerip(builder, peeripOffset);
    return HostConnect.EndHostConnect(builder);
  }

  public static void StartHostConnect(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPeerip(FlatBufferBuilder builder, StringOffset peeripOffset) { builder.AddOffset(0, peeripOffset.Value, 0); }
  public static void AddPeerport(FlatBufferBuilder builder, int peerport) { builder.AddInt(1, peerport, 0); }
  public static void AddServertype(FlatBufferBuilder builder, int servertype) { builder.AddInt(2, servertype, 0); }
  public static void AddServerid(FlatBufferBuilder builder, int serverid) { builder.AddInt(3, serverid, 0); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(4, (int)messageid, 1); }
  public static Offset<HostConnect> EndHostConnect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HostConnect>(o);
  }
  public HostConnectT UnPack() {
    var _o = new HostConnectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HostConnectT _o) {
    _o.Peerip = this.Peerip;
    _o.Peerport = this.Peerport;
    _o.Servertype = this.Servertype;
    _o.Serverid = this.Serverid;
    _o.Messageid = this.Messageid;
  }
  public static Offset<HostConnect> Pack(FlatBufferBuilder builder, HostConnectT _o) {
    if (_o == null) return default(Offset<HostConnect>);
    var _peerip = _o.Peerip == null ? default(StringOffset) : builder.CreateString(_o.Peerip);
    return CreateHostConnect(
      builder,
      _peerip,
      _o.Peerport,
      _o.Servertype,
      _o.Serverid,
      _o.Messageid);
  }
};

public class HostConnectT
{
  public string Peerip { get; set; }
  public int Peerport { get; set; }
  public int Servertype { get; set; }
  public int Serverid { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public HostConnectT() {
    this.Peerip = null;
    this.Peerport = 0;
    this.Servertype = 0;
    this.Serverid = 0;
    this.Messageid = EPacketProtocol.Host_Connect;
  }
}

