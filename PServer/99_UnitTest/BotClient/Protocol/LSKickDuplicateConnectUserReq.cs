// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LSKickDuplicateConnectUserReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LSKickDuplicateConnectUserReq GetRootAsLSKickDuplicateConnectUserReq(ByteBuffer _bb) { return GetRootAsLSKickDuplicateConnectUserReq(_bb, new LSKickDuplicateConnectUserReq()); }
  public static LSKickDuplicateConnectUserReq GetRootAsLSKickDuplicateConnectUserReq(ByteBuffer _bb, LSKickDuplicateConnectUserReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LSKickDuplicateConnectUserReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AccountSeq { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ErrorCode { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExistPilgrimServerID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(10); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.LS_KickDuplicateConnectUserReq; } }

  public static Offset<LSKickDuplicateConnectUserReq> CreateLSKickDuplicateConnectUserReq(FlatBufferBuilder builder,
      int AccountSeq = 0,
      int ErrorCode = 0,
      int ExistPilgrimServerID = 0,
      EPacketProtocol messageid = EPacketProtocol.LS_KickDuplicateConnectUserReq) {
    builder.StartTable(4);
    LSKickDuplicateConnectUserReq.AddMessageid(builder, messageid);
    LSKickDuplicateConnectUserReq.AddExistPilgrimServerID(builder, ExistPilgrimServerID);
    LSKickDuplicateConnectUserReq.AddErrorCode(builder, ErrorCode);
    LSKickDuplicateConnectUserReq.AddAccountSeq(builder, AccountSeq);
    return LSKickDuplicateConnectUserReq.EndLSKickDuplicateConnectUserReq(builder);
  }

  public static void StartLSKickDuplicateConnectUserReq(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddAccountSeq(FlatBufferBuilder builder, int AccountSeq) { builder.AddInt(0, AccountSeq, 0); }
  public static void AddErrorCode(FlatBufferBuilder builder, int ErrorCode) { builder.AddInt(1, ErrorCode, 0); }
  public static void AddExistPilgrimServerID(FlatBufferBuilder builder, int ExistPilgrimServerID) { builder.AddInt(2, ExistPilgrimServerID, 0); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(3, (int)messageid, 10006); }
  public static Offset<LSKickDuplicateConnectUserReq> EndLSKickDuplicateConnectUserReq(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LSKickDuplicateConnectUserReq>(o);
  }
  public LSKickDuplicateConnectUserReqT UnPack() {
    var _o = new LSKickDuplicateConnectUserReqT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LSKickDuplicateConnectUserReqT _o) {
    _o.AccountSeq = this.AccountSeq;
    _o.ErrorCode = this.ErrorCode;
    _o.ExistPilgrimServerID = this.ExistPilgrimServerID;
    _o.Messageid = this.Messageid;
  }
  public static Offset<LSKickDuplicateConnectUserReq> Pack(FlatBufferBuilder builder, LSKickDuplicateConnectUserReqT _o) {
    if (_o == null) return default(Offset<LSKickDuplicateConnectUserReq>);
    return CreateLSKickDuplicateConnectUserReq(
      builder,
      _o.AccountSeq,
      _o.ErrorCode,
      _o.ExistPilgrimServerID,
      _o.Messageid);
  }
};

public class LSKickDuplicateConnectUserReqT
{
  public int AccountSeq { get; set; }
  public int ErrorCode { get; set; }
  public int ExistPilgrimServerID { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public LSKickDuplicateConnectUserReqT() {
    this.AccountSeq = 0;
    this.ErrorCode = 0;
    this.ExistPilgrimServerID = 0;
    this.Messageid = EPacketProtocol.LS_KickDuplicateConnectUserReq;
  }
}

