// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LCConnectGameServerRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LCConnectGameServerRes GetRootAsLCConnectGameServerRes(ByteBuffer _bb) { return GetRootAsLCConnectGameServerRes(_bb, new LCConnectGameServerRes()); }
  public static LCConnectGameServerRes GetRootAsLCConnectGameServerRes(ByteBuffer _bb, LCConnectGameServerRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LCConnectGameServerRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DConnectServerInfo? ServerInfo { get { int o = __p.__offset(4); return o != 0 ? (DConnectServerInfo?)(new DConnectServerInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public DServerInfo? MessengerServerInfo { get { int o = __p.__offset(6); return o != 0 ? (DServerInfo?)(new DServerInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(8); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.LC_ConnectGameServerRes; } }

  public static Offset<LCConnectGameServerRes> CreateLCConnectGameServerRes(FlatBufferBuilder builder,
      Offset<DConnectServerInfo> ServerInfoOffset = default(Offset<DConnectServerInfo>),
      Offset<DServerInfo> MessengerServerInfoOffset = default(Offset<DServerInfo>),
      EPacketProtocol messageid = EPacketProtocol.LC_ConnectGameServerRes) {
    builder.StartTable(3);
    LCConnectGameServerRes.AddMessageid(builder, messageid);
    LCConnectGameServerRes.AddMessengerServerInfo(builder, MessengerServerInfoOffset);
    LCConnectGameServerRes.AddServerInfo(builder, ServerInfoOffset);
    return LCConnectGameServerRes.EndLCConnectGameServerRes(builder);
  }

  public static void StartLCConnectGameServerRes(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddServerInfo(FlatBufferBuilder builder, Offset<DConnectServerInfo> ServerInfoOffset) { builder.AddOffset(0, ServerInfoOffset.Value, 0); }
  public static void AddMessengerServerInfo(FlatBufferBuilder builder, Offset<DServerInfo> MessengerServerInfoOffset) { builder.AddOffset(1, MessengerServerInfoOffset.Value, 0); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(2, (int)messageid, 10012); }
  public static Offset<LCConnectGameServerRes> EndLCConnectGameServerRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LCConnectGameServerRes>(o);
  }
  public LCConnectGameServerResT UnPack() {
    var _o = new LCConnectGameServerResT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LCConnectGameServerResT _o) {
    _o.ServerInfo = this.ServerInfo.HasValue ? this.ServerInfo.Value.UnPack() : null;
    _o.MessengerServerInfo = this.MessengerServerInfo.HasValue ? this.MessengerServerInfo.Value.UnPack() : null;
    _o.Messageid = this.Messageid;
  }
  public static Offset<LCConnectGameServerRes> Pack(FlatBufferBuilder builder, LCConnectGameServerResT _o) {
    if (_o == null) return default(Offset<LCConnectGameServerRes>);
    var _ServerInfo = _o.ServerInfo == null ? default(Offset<DConnectServerInfo>) : DConnectServerInfo.Pack(builder, _o.ServerInfo);
    var _MessengerServerInfo = _o.MessengerServerInfo == null ? default(Offset<DServerInfo>) : DServerInfo.Pack(builder, _o.MessengerServerInfo);
    return CreateLCConnectGameServerRes(
      builder,
      _ServerInfo,
      _MessengerServerInfo,
      _o.Messageid);
  }
};

public class LCConnectGameServerResT
{
  public DConnectServerInfoT ServerInfo { get; set; }
  public DServerInfoT MessengerServerInfo { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public LCConnectGameServerResT() {
    this.ServerInfo = null;
    this.MessengerServerInfo = null;
    this.Messageid = EPacketProtocol.LC_ConnectGameServerRes;
  }
}

