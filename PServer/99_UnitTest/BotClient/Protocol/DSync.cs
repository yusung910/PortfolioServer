// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DSync : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DSync GetRootAsDSync(ByteBuffer _bb) { return GetRootAsDSync(_bb, new DSync()); }
  public static DSync GetRootAsDSync(ByteBuffer _bb, DSync obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DSync __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Sync SyncBehaviorType { get { int o = __p.__offset(4); return o != 0 ? (Sync)__p.bb.Get(o + __p.bb_pos) : Sync.NONE; } }
  public TTable? SyncBehavior<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<DSync> CreateDSync(FlatBufferBuilder builder,
      Sync SyncBehavior_type = Sync.NONE,
      int SyncBehaviorOffset = 0) {
    builder.StartTable(2);
    DSync.AddSyncBehavior(builder, SyncBehaviorOffset);
    DSync.AddSyncBehaviorType(builder, SyncBehavior_type);
    return DSync.EndDSync(builder);
  }

  public static void StartDSync(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSyncBehaviorType(FlatBufferBuilder builder, Sync SyncBehaviorType) { builder.AddByte(0, (byte)SyncBehaviorType, 0); }
  public static void AddSyncBehavior(FlatBufferBuilder builder, int SyncBehaviorOffset) { builder.AddOffset(1, SyncBehaviorOffset, 0); }
  public static Offset<DSync> EndDSync(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DSync>(o);
  }
  public DSyncT UnPack() {
    var _o = new DSyncT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DSyncT _o) {
    _o.SyncBehavior = new SyncUnion();
    _o.SyncBehavior.Type = this.SyncBehaviorType;
    switch (this.SyncBehaviorType) {
      default: break;
      case Sync.Add:
        _o.SyncBehavior.Value = this.SyncBehavior<SCAddSyncData>().HasValue ? this.SyncBehavior<SCAddSyncData>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<DSync> Pack(FlatBufferBuilder builder, DSyncT _o) {
    if (_o == null) return default(Offset<DSync>);
    var _SyncBehavior_type = _o.SyncBehavior == null ? Sync.NONE : _o.SyncBehavior.Type;
    var _SyncBehavior = _o.SyncBehavior == null ? 0 : SyncUnion.Pack(builder, _o.SyncBehavior);
    return CreateDSync(
      builder,
      _SyncBehavior_type,
      _SyncBehavior);
  }
};

public class DSyncT
{
  public SyncUnion SyncBehavior { get; set; }

  public DSyncT() {
    this.SyncBehavior = null;
  }
}

