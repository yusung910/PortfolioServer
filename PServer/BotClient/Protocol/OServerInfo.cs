// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
public struct OServerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OServerInfo GetRootAsOServerInfo(ByteBuffer _bb) { return GetRootAsOServerInfo(_bb, new OServerInfo()); }
  public static OServerInfo GetRootAsOServerInfo(ByteBuffer _bb, OServerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OServerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ServerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ServerStatus { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Address { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAddressBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAddressBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAddressArray() { return __p.__vector_as_array<byte>(8); }
  public int Port { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool HasCharacter { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int State { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<OServerInfo> CreateOServerInfo(FlatBufferBuilder builder,
      int ServerID = 0,
      int ServerStatus = 0,
      StringOffset AddressOffset = default(StringOffset),
      int Port = 0,
      bool HasCharacter = false,
      int State = 0) {
    builder.StartTable(6);
    OServerInfo.AddState(builder, State);
    OServerInfo.AddPort(builder, Port);
    OServerInfo.AddAddress(builder, AddressOffset);
    OServerInfo.AddServerStatus(builder, ServerStatus);
    OServerInfo.AddServerID(builder, ServerID);
    OServerInfo.AddHasCharacter(builder, HasCharacter);
    return OServerInfo.EndOServerInfo(builder);
  }

  public static void StartOServerInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddServerID(FlatBufferBuilder builder, int ServerID) { builder.AddInt(0, ServerID, 0); }
  public static void AddServerStatus(FlatBufferBuilder builder, int ServerStatus) { builder.AddInt(1, ServerStatus, 0); }
  public static void AddAddress(FlatBufferBuilder builder, StringOffset AddressOffset) { builder.AddOffset(2, AddressOffset.Value, 0); }
  public static void AddPort(FlatBufferBuilder builder, int Port) { builder.AddInt(3, Port, 0); }
  public static void AddHasCharacter(FlatBufferBuilder builder, bool HasCharacter) { builder.AddBool(4, HasCharacter, false); }
  public static void AddState(FlatBufferBuilder builder, int State) { builder.AddInt(5, State, 0); }
  public static Offset<OServerInfo> EndOServerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OServerInfo>(o);
  }
  public OServerInfoT UnPack() {
    var _o = new OServerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OServerInfoT _o) {
    _o.ServerID = this.ServerID;
    _o.ServerStatus = this.ServerStatus;
    _o.Address = this.Address;
    _o.Port = this.Port;
    _o.HasCharacter = this.HasCharacter;
    _o.State = this.State;
  }
  public static Offset<OServerInfo> Pack(FlatBufferBuilder builder, OServerInfoT _o) {
    if (_o == null) return default(Offset<OServerInfo>);
    var _Address = _o.Address == null ? default(StringOffset) : builder.CreateString(_o.Address);
    return CreateOServerInfo(
      builder,
      _o.ServerID,
      _o.ServerStatus,
      _Address,
      _o.Port,
      _o.HasCharacter,
      _o.State);
  }
};

public class OServerInfoT
{
  public int ServerID { get; set; }
  public int ServerStatus { get; set; }
  public string Address { get; set; }
  public int Port { get; set; }
  public bool HasCharacter { get; set; }
  public int State { get; set; }

  public OServerInfoT() {
    this.ServerID = 0;
    this.ServerStatus = 0;
    this.Address = null;
    this.Port = 0;
    this.HasCharacter = false;
    this.State = 0;
  }
}

