// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LCAuthRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LCAuthRes GetRootAsLCAuthRes(ByteBuffer _bb) { return GetRootAsLCAuthRes(_bb, new LCAuthRes()); }
  public static LCAuthRes GetRootAsLCAuthRes(ByteBuffer _bb, LCAuthRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LCAuthRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AccountSeq { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public OServerInfo? ServerList(int j) { int o = __p.__offset(6); return o != 0 ? (OServerInfo?)(new OServerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ServerListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int LastConnectServerID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long ServerTick { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int TimeZone { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(14); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.LC_AuthRes; } }

  public static Offset<LCAuthRes> CreateLCAuthRes(FlatBufferBuilder builder,
      int AccountSeq = 0,
      VectorOffset ServerListOffset = default(VectorOffset),
      int LastConnectServerID = 0,
      long ServerTick = 0,
      int TimeZone = 0,
      EPacketProtocol messageid = EPacketProtocol.LC_AuthRes) {
    builder.StartTable(6);
    LCAuthRes.AddServerTick(builder, ServerTick);
    LCAuthRes.AddMessageid(builder, messageid);
    LCAuthRes.AddTimeZone(builder, TimeZone);
    LCAuthRes.AddLastConnectServerID(builder, LastConnectServerID);
    LCAuthRes.AddServerList(builder, ServerListOffset);
    LCAuthRes.AddAccountSeq(builder, AccountSeq);
    return LCAuthRes.EndLCAuthRes(builder);
  }

  public static void StartLCAuthRes(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddAccountSeq(FlatBufferBuilder builder, int AccountSeq) { builder.AddInt(0, AccountSeq, 0); }
  public static void AddServerList(FlatBufferBuilder builder, VectorOffset ServerListOffset) { builder.AddOffset(1, ServerListOffset.Value, 0); }
  public static VectorOffset CreateServerListVector(FlatBufferBuilder builder, Offset<OServerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateServerListVectorBlock(FlatBufferBuilder builder, Offset<OServerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartServerListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLastConnectServerID(FlatBufferBuilder builder, int LastConnectServerID) { builder.AddInt(2, LastConnectServerID, 0); }
  public static void AddServerTick(FlatBufferBuilder builder, long ServerTick) { builder.AddLong(3, ServerTick, 0); }
  public static void AddTimeZone(FlatBufferBuilder builder, int TimeZone) { builder.AddInt(4, TimeZone, 0); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(5, (int)messageid, 10003); }
  public static Offset<LCAuthRes> EndLCAuthRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LCAuthRes>(o);
  }
  public LCAuthResT UnPack() {
    var _o = new LCAuthResT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LCAuthResT _o) {
    _o.AccountSeq = this.AccountSeq;
    _o.ServerList = new List<OServerInfoT>();
    for (var _j = 0; _j < this.ServerListLength; ++_j) {_o.ServerList.Add(this.ServerList(_j).HasValue ? this.ServerList(_j).Value.UnPack() : null);}
    _o.LastConnectServerID = this.LastConnectServerID;
    _o.ServerTick = this.ServerTick;
    _o.TimeZone = this.TimeZone;
    _o.Messageid = this.Messageid;
  }
  public static Offset<LCAuthRes> Pack(FlatBufferBuilder builder, LCAuthResT _o) {
    if (_o == null) return default(Offset<LCAuthRes>);
    var _ServerList = default(VectorOffset);
    if (_o.ServerList != null) {
      var __ServerList = new Offset<OServerInfo>[_o.ServerList.Count];
      for (var _j = 0; _j < __ServerList.Length; ++_j) { __ServerList[_j] = OServerInfo.Pack(builder, _o.ServerList[_j]); }
      _ServerList = CreateServerListVector(builder, __ServerList);
    }
    return CreateLCAuthRes(
      builder,
      _o.AccountSeq,
      _ServerList,
      _o.LastConnectServerID,
      _o.ServerTick,
      _o.TimeZone,
      _o.Messageid);
  }
};

public class LCAuthResT
{
  public int AccountSeq { get; set; }
  public List<OServerInfoT> ServerList { get; set; }
  public int LastConnectServerID { get; set; }
  public long ServerTick { get; set; }
  public int TimeZone { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public LCAuthResT() {
    this.AccountSeq = 0;
    this.ServerList = null;
    this.LastConnectServerID = 0;
    this.ServerTick = 0;
    this.TimeZone = 0;
    this.Messageid = EPacketProtocol.LC_AuthRes;
  }
}

