// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DConnectServerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DConnectServerInfo GetRootAsDConnectServerInfo(ByteBuffer _bb) { return GetRootAsDConnectServerInfo(_bb, new DConnectServerInfo()); }
  public static DConnectServerInfo GetRootAsDConnectServerInfo(ByteBuffer _bb, DConnectServerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DConnectServerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DestServerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsAllow { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int WaitingCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OTP { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<DConnectServerInfo> CreateDConnectServerInfo(FlatBufferBuilder builder,
      int DestServerID = 0,
      bool IsAllow = false,
      int WaitingCount = 0,
      int OTP = 0) {
    builder.StartTable(4);
    DConnectServerInfo.AddOTP(builder, OTP);
    DConnectServerInfo.AddWaitingCount(builder, WaitingCount);
    DConnectServerInfo.AddDestServerID(builder, DestServerID);
    DConnectServerInfo.AddIsAllow(builder, IsAllow);
    return DConnectServerInfo.EndDConnectServerInfo(builder);
  }

  public static void StartDConnectServerInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddDestServerID(FlatBufferBuilder builder, int DestServerID) { builder.AddInt(0, DestServerID, 0); }
  public static void AddIsAllow(FlatBufferBuilder builder, bool IsAllow) { builder.AddBool(1, IsAllow, false); }
  public static void AddWaitingCount(FlatBufferBuilder builder, int WaitingCount) { builder.AddInt(2, WaitingCount, 0); }
  public static void AddOTP(FlatBufferBuilder builder, int OTP) { builder.AddInt(3, OTP, 0); }
  public static Offset<DConnectServerInfo> EndDConnectServerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DConnectServerInfo>(o);
  }
  public DConnectServerInfoT UnPack() {
    var _o = new DConnectServerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DConnectServerInfoT _o) {
    _o.DestServerID = this.DestServerID;
    _o.IsAllow = this.IsAllow;
    _o.WaitingCount = this.WaitingCount;
    _o.OTP = this.OTP;
  }
  public static Offset<DConnectServerInfo> Pack(FlatBufferBuilder builder, DConnectServerInfoT _o) {
    if (_o == null) return default(Offset<DConnectServerInfo>);
    return CreateDConnectServerInfo(
      builder,
      _o.DestServerID,
      _o.IsAllow,
      _o.WaitingCount,
      _o.OTP);
  }
};

public class DConnectServerInfoT
{
  public int DestServerID { get; set; }
  public bool IsAllow { get; set; }
  public int WaitingCount { get; set; }
  public int OTP { get; set; }

  public DConnectServerInfoT() {
    this.DestServerID = 0;
    this.IsAllow = false;
    this.WaitingCount = 0;
    this.OTP = 0;
  }
}

