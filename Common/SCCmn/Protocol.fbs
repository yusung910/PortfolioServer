//-----------------------------------------------------------------------------
//
// IDL 작성 시
//
// 1. Prefix					Example
// C 	- Client
// S 	- Server(GameServer)	CS, SC, SL
// E	- Server(GameServer)	SE, EGDB, ES, EL
// L 	- LoginServer
// M 	- MessengerServer		CM, MC
// Log 	- LogServer				SLog, LLog, BLog
// U	- UnityServer			SU, US
//
// UDB 	- UserDB				SUDB
// GDB 	- GameDB
// LDB 	- LogDB
// WDB 	- WorldDB (구 UnityDB )
// (*플랫버퍼 IDL을 이용하지 않더라도 같은 규칙임)
// 
// 2. Suffix
// Req				- 요청
// Res				- 요청에 의한 응답 (Request 패킷은 반드시 Response가 있다)
// Noti				- 알림
// Broadcast		- 전체 알림 류
//
// 3. Structure는 접두사 O(Object)를 붙인다.
//
// *Example
// table SCAuthResponse		<-- 접두사 Client -> Server, 접미사 Response로 요청에 의한 응답임
// {
//   HeroInfoList:[MHeroInfo];
//   HeroSlotCount:int;
//
//   messageid:EPacketProtocol = SC_AuthResponse;		<-- 전송 패킷은 마지막에 messageid 프로토콜을 넣는다.
// }														마지막에 넣는 이유는 오버로딩으로 안써도 되기 때문..
//
// table MHeroInfo			- Member Structure 는 접두사 M 을 붙인다.
//
// ※ 슬래시 3개이상 쓴뒤 뒤에 한글이 있으면 안됨 (빌드오류나옴)
//
// * 작성 시 FieldName은 소문자로 작성. 그 외에 warning 발생
//-----------------------------------------------------------------------------
// Start Protocols
//-----------------------------------------------------------------------------
enum EPacketProtocol:int
{
    //////////////////////////////////////////////////////////
    //  Common
    
	None = 0,
	Host_Connect,
	Host_Close,
	Host_ConnectFailed,

	// 기존 대역 10 ~
	Host_Hello = 12,


	// ~999
	SC_IntegrationErrorNotification         = 10000,


    //////////////////////////////////////////////////////////
    //  Login Server 

    CL_AuthReq                              = 10001,
    LUDB_AuthReq,
    UDBL_AuthRes,
    LC_AuthRes,
    LC_AuthErrorRes,
    LS_KickDuplicateConnectUserReq,
    LUDB_ConnectServerIDClear,
    
    //
    LS_Connect,

    LP_AuthLoginReq,
    PL_AuthLoginRes,

    CL_ConnectGameServerReq,
    LC_ConnectGameServerRes,


    //////////////////////////////////////////////////////////
    //  GameServer

    CS_AuthReq                              = 50001,
	CS_EnterGameReq,
	SC_EnterGameAck,


	PacketMax
}



//-----------------------------------------------------------------------------
//  end Protocols
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
//  Begin Error Enum
//-----------------------------------------------------------------------------
enum EErrorMsg:int
{
	EF_NONE														= 0,

	//공통 사용 영역
	EF_HOST_IP_IS_NOT_ALLOWED									= 11,
	EF_DUPLICATE_CONNECTION_NET_ALLOWED							= 12,

    

    //-------------------------------------------------------------------------
	// Login Server
    //-------------------------------------------------------------------------
	// 인증오류
	EF_LOGIN_PF_ERROR  											= 101,      //로그인 오류
    EF_LOGIN_ACCOUNT_UNIQUE_KEY_INVALID                         = 102,      //인증키 오류
    
    EF_LOGIN_PF_GOOGLE_ERROR                                    = 111,
    EF_LOGIN_PF_GOOGLE_ERR_PROTOCOL                             = 112,
    EF_LOGIN_PF_GOOGLE_ERR_SUBJECT                              = 113,
    EF_LOGIN_PF_GOOGLE_ERR_EXPIRE                               = 114,
    EF_LOGIN_PF_GOOGLE_ERR_TOKEN                                = 115,


    EF_LOGIN_PF_APPSTORE_ERROR                                  = 121,
    EF_LOGIN_PF_APPSTORE_ERR_PROTOCOL                           = 122,
    EF_LOGIN_PF_APPSTORE_ERR_SUBJECT                            = 123,
    EF_LOGIN_PF_APPSTORE_ERR_EXPIRE                             = 124,
    EF_LOGIN_PF_APPSTORE_ERR_TOKEN                              = 125,

    EF_LOGIN_PF_APPSTORE_ERROR_KEYLOAD                          = 126,
    EF_LOGIN_PF_APPSTORE_MISSING_KEY                            = 127,
    EF_LOGIN_PF_APPSTORE_JWT_ERROR                              = 128,

    EF_LOGIN_PF_NAVER_ERROR                                     = 131,
    EF_LOGIN_PF_FACEBOOK_ERROR                                  = 141,
    


    //-------------------------------------------------------------------------
	// Error 10000단위
    //-------------------------------------------------------------------------
    // Common
    EF_FAIL_MISSING_REQUIRED_FIELD                              = 10101,

    // KICK
    EF_KICK                                                     = 10201,
    EF_KICK_MAINTENANCE                                         = 10202,

    //
    EF_KICK_DUPLICATE_LOGIN                                     = 10211,
    EF_KICK_INVALID_PLATFORM                                    = 10212,
    EF_KICK_INVALID_APP_VERSION                                 = 10213,

    //제재 중인 계정
    EF_SANCTION_ACCOUNT                                         = 11001,
    EF_DURATION_BLOCK_ACCOUNT                                   = 11002,
    EF_PERMANENT_BLOCK_ACCOUNT                                  = 11003,

}

//-----------------------------------------------------------------------------
//  End Errors Enum
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Message Structure Start
//-----------------------------------------------------------------------------
table DServerInfo
{
    ServerID:int;               //서버 고유 ID
    ServerStatus:int;           //점검 등에 따른 서버 상태(닫힘, 원활, 포화)

    Address:string;             //IP
    Port:int;                   //Port

    HasCharacter:bool;          //서버에 캐릭터 존재하고 있는지
    RecommendState:int;                  //EServerState 서버 추천 여부
}

table DConnectServerInfo
{
    DestServerID    : int;
    IsAllow         : bool;
    WaitingCount    : int;  
    OTP             : int;
}

table DDateTime
{
    Year:int;
    Month:int;
    Day:int;
    Hour:int;
    Minute:int;
    Second:int;
}

//-----------------------------------------------------------------------------
// Message Structure End
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Server Reserved Packet Start
//-----------------------------------------------------------------------------
table HostConnect
{
    peerip:string;
    peerport:int;

    servertype:int;
    serverid:int = 0;
    messageid:EPacketProtocol = Host_Connect;
}

table HostClose
{
	messageid:EPacketProtocol = Host_Close;
}

table HostConnectFailed
{
	messageid:EPacketProtocol = Host_ConnectFailed;
}

table HostHello
{
	servertype:int;
	serverid:int;
	name:string;
	buildtype:int;

	messageid:EPacketProtocol = Host_Hello;
}

//-----------------------------------------------------------------------------
// Server Reserved Packet End
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// LoginServer Table Start
//-----------------------------------------------------------------------------

table CLAuthReq
{
    //플랫폼(google, naver, facebook 등등에서 얻어오는 토큰값)
    //또는 클라에서 접속 할 때 사용할 기본키, 계정처럼 사용되는 값
    AccountID                       :string;
    //로그인 플랫폼(google, naver, facebook 등등)
    LoginPlatformType               :int;
    //플랫폼에서 받아오는 토큰
    PlatformToken                   :string;
    // 클라 유형(pc, mobile 등등)
    ClientType                      :int;
    // 어플 버전
    AppVersion                      :int;

    messageid:EPacketProtocol = CL_AuthReq;
}

table LCAuthRes
{
    AccountSeq:int;
    ServerList:[DServerInfo];
    LastConnectServerID: int;
    ServerTick:long;
    TimeZone:int;

    messageid:EPacketProtocol = LC_AuthRes;
}

table LCAuthErrorRes
{
    ErrorCode: int;
    Value: int;
    messageid:EPacketProtocol = LC_AuthErrorRes;
}

table LSKickDuplicateConnectUserReq
{
    AccountSeq : int;
    ErrorCode: int;
    ExistPilgrimServerID: int;

    messageid:EPacketProtocol = LS_KickDuplicateConnectUserReq;
}

table CLConnectGameServerReq
{
    serverid: int;

    messageid:EPacketProtocol = CL_ConnectGameServerReq;
}

table LCConnectGameServerRes
{
    ServerInfo: DConnectServerInfo;

    MessengerServerInfo:DServerInfo;
    //BillingServer 추가?
    messageid:EPacketProtocol = LC_ConnectGameServerRes;
}

//-----------------------------------------------------------------------------
// LoginServer Table End
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// GameServer Table Start
//-----------------------------------------------------------------------------
table CSEnterGameReq
{
	AccountID: string;
	AccountPW: string;
    HostID: int;
	messageid:EPacketProtocol = CS_EnterGameReq;
}

table SCEnterGameAck
{
	AccountID: string;
	AccountPW: string;
	messageid:EPacketProtocol = SC_EnterGameAck;
}

table SCIntegrationErrorNotification
{
    SrcMsgID:int;
	Error:int;
	messageid:EPacketProtocol = SC_IntegrationErrorNotification;
}
//-----------------------------------------------------------------------------
// GameServer Table End
//-----------------------------------------------------------------------------