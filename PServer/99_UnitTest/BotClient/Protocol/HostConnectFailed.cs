// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct HostConnectFailed : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HostConnectFailed GetRootAsHostConnectFailed(ByteBuffer _bb) { return GetRootAsHostConnectFailed(_bb, new HostConnectFailed()); }
  public static HostConnectFailed GetRootAsHostConnectFailed(ByteBuffer _bb, HostConnectFailed obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HostConnectFailed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public EPacketProtocol Messageid { get { int o = __p.__offset(4); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.Host_ConnectFailed; } }

  public static Offset<HostConnectFailed> CreateHostConnectFailed(FlatBufferBuilder builder,
      EPacketProtocol messageid = EPacketProtocol.Host_ConnectFailed) {
    builder.StartTable(1);
    HostConnectFailed.AddMessageid(builder, messageid);
    return HostConnectFailed.EndHostConnectFailed(builder);
  }

  public static void StartHostConnectFailed(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(0, (int)messageid, 3); }
  public static Offset<HostConnectFailed> EndHostConnectFailed(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HostConnectFailed>(o);
  }
  public HostConnectFailedT UnPack() {
    var _o = new HostConnectFailedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HostConnectFailedT _o) {
    _o.Messageid = this.Messageid;
  }
  public static Offset<HostConnectFailed> Pack(FlatBufferBuilder builder, HostConnectFailedT _o) {
    if (_o == null) return default(Offset<HostConnectFailed>);
    return CreateHostConnectFailed(
      builder,
      _o.Messageid);
  }
};

public class HostConnectFailedT
{
  public EPacketProtocol Messageid { get; set; }

  public HostConnectFailedT() {
    this.Messageid = EPacketProtocol.Host_ConnectFailed;
  }
}

