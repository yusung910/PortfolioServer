// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CLConnectGameServerReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CLConnectGameServerReq GetRootAsCLConnectGameServerReq(ByteBuffer _bb) { return GetRootAsCLConnectGameServerReq(_bb, new CLConnectGameServerReq()); }
  public static CLConnectGameServerReq GetRootAsCLConnectGameServerReq(ByteBuffer _bb, CLConnectGameServerReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CLConnectGameServerReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Serverid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(6); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.CL_ConnectGameServerReq; } }

  public static Offset<CLConnectGameServerReq> CreateCLConnectGameServerReq(FlatBufferBuilder builder,
      int serverid = 0,
      EPacketProtocol messageid = EPacketProtocol.CL_ConnectGameServerReq) {
    builder.StartTable(2);
    CLConnectGameServerReq.AddMessageid(builder, messageid);
    CLConnectGameServerReq.AddServerid(builder, serverid);
    return CLConnectGameServerReq.EndCLConnectGameServerReq(builder);
  }

  public static void StartCLConnectGameServerReq(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddServerid(FlatBufferBuilder builder, int serverid) { builder.AddInt(0, serverid, 0); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(1, (int)messageid, 10011); }
  public static Offset<CLConnectGameServerReq> EndCLConnectGameServerReq(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CLConnectGameServerReq>(o);
  }
  public CLConnectGameServerReqT UnPack() {
    var _o = new CLConnectGameServerReqT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CLConnectGameServerReqT _o) {
    _o.Serverid = this.Serverid;
    _o.Messageid = this.Messageid;
  }
  public static Offset<CLConnectGameServerReq> Pack(FlatBufferBuilder builder, CLConnectGameServerReqT _o) {
    if (_o == null) return default(Offset<CLConnectGameServerReq>);
    return CreateCLConnectGameServerReq(
      builder,
      _o.Serverid,
      _o.Messageid);
  }
};

public class CLConnectGameServerReqT
{
  public int Serverid { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public CLConnectGameServerReqT() {
    this.Serverid = 0;
    this.Messageid = EPacketProtocol.CL_ConnectGameServerReq;
  }
}

