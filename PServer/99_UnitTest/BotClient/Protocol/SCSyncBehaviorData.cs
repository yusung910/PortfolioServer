// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SCSyncBehaviorData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SCSyncBehaviorData GetRootAsSCSyncBehaviorData(ByteBuffer _bb) { return GetRootAsSCSyncBehaviorData(_bb, new SCSyncBehaviorData()); }
  public static SCSyncBehaviorData GetRootAsSCSyncBehaviorData(ByteBuffer _bb, SCSyncBehaviorData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SCSyncBehaviorData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DSync? SyncBehaviorList(int j) { int o = __p.__offset(4); return o != 0 ? (DSync?)(new DSync()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SyncBehaviorListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(6); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.SC_SyncBehaviorData; } }

  public static Offset<SCSyncBehaviorData> CreateSCSyncBehaviorData(FlatBufferBuilder builder,
      VectorOffset SyncBehaviorListOffset = default(VectorOffset),
      EPacketProtocol messageid = EPacketProtocol.SC_SyncBehaviorData) {
    builder.StartTable(2);
    SCSyncBehaviorData.AddMessageid(builder, messageid);
    SCSyncBehaviorData.AddSyncBehaviorList(builder, SyncBehaviorListOffset);
    return SCSyncBehaviorData.EndSCSyncBehaviorData(builder);
  }

  public static void StartSCSyncBehaviorData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSyncBehaviorList(FlatBufferBuilder builder, VectorOffset SyncBehaviorListOffset) { builder.AddOffset(0, SyncBehaviorListOffset.Value, 0); }
  public static VectorOffset CreateSyncBehaviorListVector(FlatBufferBuilder builder, Offset<DSync>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSyncBehaviorListVectorBlock(FlatBufferBuilder builder, Offset<DSync>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSyncBehaviorListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(1, (int)messageid, 21000); }
  public static Offset<SCSyncBehaviorData> EndSCSyncBehaviorData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCSyncBehaviorData>(o);
  }
  public SCSyncBehaviorDataT UnPack() {
    var _o = new SCSyncBehaviorDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SCSyncBehaviorDataT _o) {
    _o.SyncBehaviorList = new List<DSyncT>();
    for (var _j = 0; _j < this.SyncBehaviorListLength; ++_j) {_o.SyncBehaviorList.Add(this.SyncBehaviorList(_j).HasValue ? this.SyncBehaviorList(_j).Value.UnPack() : null);}
    _o.Messageid = this.Messageid;
  }
  public static Offset<SCSyncBehaviorData> Pack(FlatBufferBuilder builder, SCSyncBehaviorDataT _o) {
    if (_o == null) return default(Offset<SCSyncBehaviorData>);
    var _SyncBehaviorList = default(VectorOffset);
    if (_o.SyncBehaviorList != null) {
      var __SyncBehaviorList = new Offset<DSync>[_o.SyncBehaviorList.Count];
      for (var _j = 0; _j < __SyncBehaviorList.Length; ++_j) { __SyncBehaviorList[_j] = DSync.Pack(builder, _o.SyncBehaviorList[_j]); }
      _SyncBehaviorList = CreateSyncBehaviorListVector(builder, __SyncBehaviorList);
    }
    return CreateSCSyncBehaviorData(
      builder,
      _SyncBehaviorList,
      _o.Messageid);
  }
};

public class SCSyncBehaviorDataT
{
  public List<DSyncT> SyncBehaviorList { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public SCSyncBehaviorDataT() {
    this.SyncBehaviorList = null;
    this.Messageid = EPacketProtocol.SC_SyncBehaviorData;
  }
}

