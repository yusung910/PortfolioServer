// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct HostHello : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HostHello GetRootAsHostHello(ByteBuffer _bb) { return GetRootAsHostHello(_bb, new HostHello()); }
  public static HostHello GetRootAsHostHello(ByteBuffer _bb, HostHello obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HostHello __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Servertype { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Serverid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Buildtype { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public EPacketProtocol Messageid { get { int o = __p.__offset(12); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.Host_Hello; } }

  public static Offset<HostHello> CreateHostHello(FlatBufferBuilder builder,
      int servertype = 0,
      int serverid = 0,
      StringOffset nameOffset = default(StringOffset),
      int buildtype = 0,
      EPacketProtocol messageid = EPacketProtocol.Host_Hello) {
    builder.StartTable(5);
    HostHello.AddMessageid(builder, messageid);
    HostHello.AddBuildtype(builder, buildtype);
    HostHello.AddName(builder, nameOffset);
    HostHello.AddServerid(builder, serverid);
    HostHello.AddServertype(builder, servertype);
    return HostHello.EndHostHello(builder);
  }

  public static void StartHostHello(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddServertype(FlatBufferBuilder builder, int servertype) { builder.AddInt(0, servertype, 0); }
  public static void AddServerid(FlatBufferBuilder builder, int serverid) { builder.AddInt(1, serverid, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddBuildtype(FlatBufferBuilder builder, int buildtype) { builder.AddInt(3, buildtype, 0); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(4, (int)messageid, 12); }
  public static Offset<HostHello> EndHostHello(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HostHello>(o);
  }
  public HostHelloT UnPack() {
    var _o = new HostHelloT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HostHelloT _o) {
    _o.Servertype = this.Servertype;
    _o.Serverid = this.Serverid;
    _o.Name = this.Name;
    _o.Buildtype = this.Buildtype;
    _o.Messageid = this.Messageid;
  }
  public static Offset<HostHello> Pack(FlatBufferBuilder builder, HostHelloT _o) {
    if (_o == null) return default(Offset<HostHello>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateHostHello(
      builder,
      _o.Servertype,
      _o.Serverid,
      _name,
      _o.Buildtype,
      _o.Messageid);
  }
};

public class HostHelloT
{
  public int Servertype { get; set; }
  public int Serverid { get; set; }
  public string Name { get; set; }
  public int Buildtype { get; set; }
  public EPacketProtocol Messageid { get; set; }

  public HostHelloT() {
    this.Servertype = 0;
    this.Serverid = 0;
    this.Name = null;
    this.Buildtype = 0;
    this.Messageid = EPacketProtocol.Host_Hello;
  }
}

