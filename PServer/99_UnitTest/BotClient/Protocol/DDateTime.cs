// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DDateTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DDateTime GetRootAsDDateTime(ByteBuffer _bb) { return GetRootAsDDateTime(_bb, new DDateTime()); }
  public static DDateTime GetRootAsDDateTime(ByteBuffer _bb, DDateTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DDateTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Year { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Month { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Day { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Hour { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Minute { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Second { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<DDateTime> CreateDDateTime(FlatBufferBuilder builder,
      int Year = 0,
      int Month = 0,
      int Day = 0,
      int Hour = 0,
      int Minute = 0,
      int Second = 0) {
    builder.StartTable(6);
    DDateTime.AddSecond(builder, Second);
    DDateTime.AddMinute(builder, Minute);
    DDateTime.AddHour(builder, Hour);
    DDateTime.AddDay(builder, Day);
    DDateTime.AddMonth(builder, Month);
    DDateTime.AddYear(builder, Year);
    return DDateTime.EndDDateTime(builder);
  }

  public static void StartDDateTime(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddYear(FlatBufferBuilder builder, int Year) { builder.AddInt(0, Year, 0); }
  public static void AddMonth(FlatBufferBuilder builder, int Month) { builder.AddInt(1, Month, 0); }
  public static void AddDay(FlatBufferBuilder builder, int Day) { builder.AddInt(2, Day, 0); }
  public static void AddHour(FlatBufferBuilder builder, int Hour) { builder.AddInt(3, Hour, 0); }
  public static void AddMinute(FlatBufferBuilder builder, int Minute) { builder.AddInt(4, Minute, 0); }
  public static void AddSecond(FlatBufferBuilder builder, int Second) { builder.AddInt(5, Second, 0); }
  public static Offset<DDateTime> EndDDateTime(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DDateTime>(o);
  }
  public DDateTimeT UnPack() {
    var _o = new DDateTimeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DDateTimeT _o) {
    _o.Year = this.Year;
    _o.Month = this.Month;
    _o.Day = this.Day;
    _o.Hour = this.Hour;
    _o.Minute = this.Minute;
    _o.Second = this.Second;
  }
  public static Offset<DDateTime> Pack(FlatBufferBuilder builder, DDateTimeT _o) {
    if (_o == null) return default(Offset<DDateTime>);
    return CreateDDateTime(
      builder,
      _o.Year,
      _o.Month,
      _o.Day,
      _o.Hour,
      _o.Minute,
      _o.Second);
  }
};

public class DDateTimeT
{
  public int Year { get; set; }
  public int Month { get; set; }
  public int Day { get; set; }
  public int Hour { get; set; }
  public int Minute { get; set; }
  public int Second { get; set; }

  public DDateTimeT() {
    this.Year = 0;
    this.Month = 0;
    this.Day = 0;
    this.Hour = 0;
    this.Minute = 0;
    this.Second = 0;
  }
}

