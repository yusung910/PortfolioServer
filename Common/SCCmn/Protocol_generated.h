// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
enum EPacketProtocol : int32_t {
  None = 0,
  HostConnect = 1,
  HostClose = 2,
  HostConnectFailed = 3,
  HostHi = 12
};

inline const EPacketProtocol (&EnumValuesEPacketProtocol())[5] {
  static const EPacketProtocol values[] = {
    None,
    HostConnect,
    HostClose,
    HostConnectFailed,
    HostHi
  };
  return values;
}

inline const char * const *EnumNamesEPacketProtocol() {
  static const char * const names[14] = {
    "None",
    "HostConnect",
    "HostClose",
    "HostConnectFailed",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "HostHi",
    nullptr
  };
  return names;
}

inline const char *EnumNameEPacketProtocol(EPacketProtocol e) {
  if (::flatbuffers::IsOutRange(e, None, HostHi)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEPacketProtocol()[index];
}

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_H_
