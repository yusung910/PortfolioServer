// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct HostClose : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HostClose GetRootAsHostClose(ByteBuffer _bb) { return GetRootAsHostClose(_bb, new HostClose()); }
  public static HostClose GetRootAsHostClose(ByteBuffer _bb, HostClose obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HostClose __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public EPacketProtocol Messageid { get { int o = __p.__offset(4); return o != 0 ? (EPacketProtocol)__p.bb.GetInt(o + __p.bb_pos) : EPacketProtocol.Host_Close; } }

  public static Offset<HostClose> CreateHostClose(FlatBufferBuilder builder,
      EPacketProtocol messageid = EPacketProtocol.Host_Close) {
    builder.StartTable(1);
    HostClose.AddMessageid(builder, messageid);
    return HostClose.EndHostClose(builder);
  }

  public static void StartHostClose(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMessageid(FlatBufferBuilder builder, EPacketProtocol messageid) { builder.AddInt(0, (int)messageid, 2); }
  public static Offset<HostClose> EndHostClose(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HostClose>(o);
  }
  public HostCloseT UnPack() {
    var _o = new HostCloseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HostCloseT _o) {
    _o.Messageid = this.Messageid;
  }
  public static Offset<HostClose> Pack(FlatBufferBuilder builder, HostCloseT _o) {
    if (_o == null) return default(Offset<HostClose>);
    return CreateHostClose(
      builder,
      _o.Messageid);
  }
};

public class HostCloseT
{
  public EPacketProtocol Messageid { get; set; }

  public HostCloseT() {
    this.Messageid = EPacketProtocol.Host_Close;
  }
}

